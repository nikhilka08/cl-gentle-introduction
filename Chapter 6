6.15> 
Using INTERSECTION
	 (defun contains-article-p (l)
	   (let ((article '(a an the)))
	     (intersection article l)))
      
Using OR and MEMBER
	 (defun contains-article-p (l)
	   (or (member 'a l)
	       (member 'an l)
	       (member 'the l)))

Using AND instead of OR
	 (defun contains-article-p (l)
	   (not (and (not(member 'a l))
		     (not(member 'an l))
		     (not(member 'the l)))))


6.16>
The union of a set with NIL would the THE SET.

6.17>
Union of a set with itself would also be THE SET.

6.18>
 (defun add-vowels (set-letters)
	   (let ((vowels '(a e i o u)))
	     (union set-letters vowels)))

6.19> 
Depends on the position of NIL. If it's the first argument it would return NIL, if second it would return the set.

6.20>
First input need to be copied because set-difference returns the parts or full of first input.

6.21>
	 (defun my-subsetp (x y)
	   (not (set-difference x y)))

6.23>
	length is the lisp primitive that determines the cardinality of a set.
6.24>
	 (defun set-equal (seta setb)
	   (and (equal (length seta) (length setb))
		(not (set-difference seta setb))))

6.25>
	 (defun proper-subsetp (x y)
	   (and (not (set-equal x y))
		(subsetp x y)))




6.26>
   a)  
	(defun right-side (l)
	    (rest (member '-vs- l)))
   
   b)
	 (defun left-side (l)
	   (reverse (rest (member '-vs- (reverse l)))))


   c)
	 (defun count-common (l)
	   (length (intersection (left-side l) (right-side l))))

   d)
	(defun compare (l)
	   (list (count-common l) 'common 'features))	



----------------------List as Tables------------------------
Just for fun
Implementing ASSOC function (With my limited knowledge)

	 (defun my-assoc (word list)
	    (and list 
		 (cond ((equal (car (car list)) word) (first list))
		       (t (my-assoc word (rest list))))))


------------------------------------------------------------


